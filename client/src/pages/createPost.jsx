import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

import { getRandomPrompt } from "../utils";
import { Loader, FormField } from "../components";
import { preview } from "../assets";

const CreatePost = () => {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    name: "",
    prompt: "",
    photo: "",
  });

  const [generatingImg, setGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);

  // FORM submit handler
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (form.name && form.prompt && form.photo) {
      try {
        setLoading(true);
        const { data } = await axios.post(
          "http://localhost:8080/api/v1/post/",
          form
        );
        console.log(data);
        navigate("/");
      } catch (error) {
        console.log("BACKEND ERROR", error);
      } finally {
        setLoading(false);
      }
    } else {
      alert("Please generate an Image");
    }
  };

  // FORM fields setter
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // FORM fields setter
  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPrompt });
  };

  // GENERATE IMAGE // OPENAI
  const generateImage = async () => {
    if (form.prompt) {
      try {
        setGeneratingImg(true);
        const { data } = await axios.post(
          "http://localhost:8080/api/v1/dalle/generate",
          { prompt: form["prompt"] }
        );
        console.log(data);
        setForm({
          ...form,
          photo: `data:image/jpeg;base64,${data.photo}`,
        });
        f;
      } catch (error) {
        console.log("Error Fetching from OPEN-AI, Check your API KEY", error);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert("Please enter a prompt");
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px] ">Create</h1>

        <p className="mt-2 text-[#666e75] text-[16px] max-w[500px]">
          Create imaginative and visually stunning images generated by DALL-E
          and share it with community.
        </p>
      </div>

      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
        <div className="flex flex-col gap-5">
          <FormField
            labelName="Name"
            type="text"
            name="name"
            value={form.name}
            placeholder="john"
            handleChange={handleChange}
          />

          <FormField
            labelName="Prompt"
            type="text"
            name="prompt"
            value={form.prompt}
            placeholder="monalisa in Vincent van Gogh Starry Night   "
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSurpriseMe}
          />

          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center">
            {form.photo ? (
              <img
                src={form.photo}
                alt={form.prompt}
                className="w-full h-full object-contain"
              />
            ) : (
              <img
                src={preview}
                alt={form.prompt}
                className="w-9/12 h-9/12 object-contain opacity-40"
              />
            )}

            {generatingImg && (
              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                <Loader />
              </div>
            )}
          </div>
        </div>

        <div className="mt-5 flex gap-5">
          <button
            type="button"
            onClick={generateImage}
            className=" text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {generatingImg ? "Generating..." : "Generate"}
          </button>
        </div>

        <div className="mt-10">
          <p className="mt-2 text-[#666e75] text-[14px]">
            ** Once you have created the image you want, you can share it with
            others in the community **
          </p>
          <button
            type="submit"
            className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {loading ? "Sharing..." : "Share with the Community"}
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreatePost;
