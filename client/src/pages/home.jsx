import React, { useState, useEffect } from "react";
import axios from "axios";

import { Card, FormField, Loader } from "../components";

const RenderCard = ({ data, title }) => {
  console.log(data);
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPost, setAllPost] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchResult, setSearchResult] = useState(null);

  useEffect(() => {
    const fetchPhotos = async () => {
      try {
        setLoading(true);
        const { data } = await axios.get("http://localhost:8080/api/v1/post/");
        if (data.success) {
          setAllPost(data.data.reverse());
        }
      } catch (error) {
        console.log("Backend Fetch Error", error);
      } finally {
        setLoading(false);
      }
    };
    fetchPhotos();
  }, []);

  const handleSearchText = async (e) => {
    // clear the timeout
    clearTimeout(searchTimeout);

    setSearchText(e.target.value);

    // we dont want to filter for every key stroke
    setSearchTimeout(
      setTimeout(() => {
        const results = allPost.filter(
          (post) =>
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        console.log(results);
        setSearchResult(results);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl max-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px] ">
          The Community Showcase
        </h1>

        <p className="nt-2 text-[#666e75] text-[16px] max-w[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search text"
          type="text"
          name="text"
          placeholder="Search Post"
          value={searchText}
          handleChange={handleSearchText}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          searchText && (
            <h2 className="font-medium text-[#666e75] text-xl mb-3">
              Showing results for{" "}
              <span className="text[#222328]">{searchText}</span>
            </h2>
          )
        )}
      </div>

      <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
        {searchText ? (
          <RenderCard data={searchResult} title="No Results" />
        ) : (
          <RenderCard data={allPost} title="No Post Found" />
        )}
      </div>
    </section>
  );
};

export default Home;
